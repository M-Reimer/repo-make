#!/usr/bin/perl
#    repo-make - Tool to autobuild a set of PKGBUILD's into a working repository
#    https://github.com/M-Reimer/repo-make
#    Copyright (C) 2020 Manuel Reimer <manuel.reimer@gmx.de>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# WARNING: This script is meant to be used on dedicated build hosts! The goal
# is to autobuild a bigger set of PKGBUILD's automatically without any
# confirmation. To make this possible, dependencies are automatically installed
# to the system, this script runs on!

use strict;
use warnings;
use Getopt::Long qw(:config no_auto_abbrev);
use Pod::Simple::Text;
use Cwd;
use File::Copy;
use File::Basename;
use File::Path qw(make_path);
use File::Spec::Functions qw(rel2abs);
use File::stat;
use POSIX;
use Term::ANSIColor;
use Archive::Tar;
$Archive::Tar::DO_NOT_USE_PREFIX = 1;
use IPC::Open2;
use IPC::Open3;
use FileHandle;
use feature "state";
use constant {
  PW_NAME => 0,
  PW_UID  => 2,
  PW_GID  => 3,
  PW_DIR  => 7
};

my $VERSION = '3.2.0';
my $PROGNAME = 'repo-make';

# Main code
{
  # If not on terminal, then disable colors
  $ENV{ANSI_COLORS_DISABLED} = 1 if (!-t STDERR);

  # Colorize the error messages
  $SIG{__DIE__} =  sub {
    die(@_) if ($^S);
    print STDERR color('bold red'), "==> $PROGNAME ERROR: ", color('reset'),
                 color('bold'), $_[0], color('reset');
    exit(1);
  };

  # Read command line parameters
  my %opts = (
    'h'       => \&HELP_MESSAGE,
    'version' => \&VERSION_MESSAGE,
  );
  GetOptions(\%opts, 'C|directory=s',
                     't|target=s',
                     'V|verify',
                     'h|help',
                     'restore-repo-mtimes',
                     'version') or HELP_MESSAGE();

  # Check privileges. We have to be root!
  my $no_root_err = <<EOM;
You have to be root to run repo-make!

WARNING: Don't ever use repo-make on a productive machine or a machine you use
         for anything besides compiling software! It is made to be ran on a
         dedicated build (virtual) machine!
EOM
  die($no_root_err) if ($< != 0);

  # Switch current directory if requested via command line
  if ($opts{C}) {
    chdir($opts{C}) or die("Failed to switch directory to $opts{C}: $!\n");
  }

  # Read config file(s)
  my %cfg;
  ParseConfig('repo-make.conf', \%cfg, 1);
  die("Missing REPONAME in repomake.conf\n") unless defined($cfg{REPONAME});
  $cfg{TARGET} = 'repo';
  ParseConfig('repo-make-custom.conf', \%cfg, 1)
    if (-s 'repo-make-custom.conf');
  $cfg{BUILDUSER} = 'build';
  ParseConfig('/etc/repo-make.conf', \%cfg)
    if (-s '/etc/repo-make.conf');

  # Command line parameter "-t" overrides TARGET
  $cfg{TARGET} = $opts{t} if ($opts{t});

  # Read makepkg.conf
  my $makepkgconf = ReadMakepkgConf();

  # Replace "$CARCH" in TARGET
  $cfg{TARGET} =~ s/\$CARCH/$makepkgconf->{CARCH}/;

  # Export "PKGDEST" to make makepkg write packages directly to TARGET
  $ENV{PKGDEST} = rel2abs($cfg{TARGET});

  # Check for BUILDUSER. If not there, create it.
  my @builduserinfo;
  unless (@builduserinfo = getpwnam($cfg{BUILDUSER})) {
    InfoMsg("Creating user '$cfg{BUILDUSER}'");
    system('useradd', '-m', $cfg{BUILDUSER});
    die("Failed to create user '$cfg{BUILDUSER}'\n") if ($?);
    @builduserinfo = getpwnam($cfg{BUILDUSER}) or die($!);
  }

  # Check if BUILDUSER is able to reach our stuff.
  system('su', $cfg{BUILDUSER}, '-c', 'cat repo-make.conf > /dev/null');
  die("User '$cfg{BUILDUSER}' is not allowed to access build data\n") if ($?);

  # Check for target directory. If missing, try to create it.
  unless (-d $cfg{TARGET}) {
    make_path($cfg{TARGET}, {error => \my $err});
    die("Failed to create directory '$cfg{TARGET}'\n") if (@$err);
  }

  # Get sure BUILDUSER can write to TARGET
  system ('chown', '-R', $cfg{BUILDUSER}, $cfg{TARGET});
  die("Failed to change owner of '$cfg{TARGET}' to build user\n") if ($?);

  # If enabled in makepkg.conf, create BUILDDIR and SRCDEST and change owner
  # to BUILDUSER.
  foreach my $makepkgdir ('BUILDDIR', 'SRCDEST') {
    if ($makepkgconf->{$makepkgdir}) {
      my $dir = $makepkgconf->{$makepkgdir};
      make_path($dir, {error => \my $err});
      die("Failed to create directory '$dir'\n") if (@$err);
      system('chown', '-R', $cfg{BUILDUSER}, $dir);
      die("Failed to change owner of '$dir' to build user\n") if ($?);
    }
  }

  # Get sure gpg-agent is running if we create signed packages
  HandleGPGAgent() if ($makepkgconf->{BUILDENV}->{sign});

  # If requested, restore file modification times of already built packages
  RestoreRepoMtimes(\%cfg, $makepkgconf) if ($opts{'restore-repo-mtimes'});

  # Parsing of PKGBUILD headers may take some time... Print info message.
  InfoMsg("Parsing .SRCINFO data...");

  # Read PKGBUILDs and preprocess header information
  my %pkgfilename;
  my %dbgfilename;
  my %providerpkg;
  my @buildorder;
  foreach my $pkgbuildpath (@{$cfg{list}}) {
    next if ($pkgbuildpath =~ /(^#|^\s*$)/);
    die("Directory missing: $pkgbuildpath\n") unless (-d $pkgbuildpath);

    # Parse the SRCINFO file
    my $pkgheader = ParseSRCINFO($pkgbuildpath, $cfg{BUILDUSER});

    # Check for required header entries
    foreach my $tocheck ('pkgname', 'arch') {
      die("Missing '$tocheck' in '$pkgbuildpath/PKGBUILD'\n")
        if (@{$pkgheader->{$tocheck}} == 0);
    }

    # Continue if the PKGBUILD can't be built on current architecture.
    unless($pkgheader->{arch}->[0] eq 'any' ||
           grep {$_ eq $makepkgconf->{CARCH}} @{$pkgheader->{arch}}) {
      WarnMsg("Skipping $pkgbuildpath. Architecture not supported.");
      next;
    }

    my $dependsref = [@{$pkgheader->{depends}},
                      @{$pkgheader->{makedepends}}];
    push(@$dependsref, @{$pkgheader->{checkdepends}})
      if ($makepkgconf->{BUILDENV}->{check});
    foreach my $pkgname (@{$pkgheader->{pkgname}}) {
      my $suffix = '';
      $suffix .= "$pkgheader->{epoch}:" if $pkgheader->{'epoch'};
      $suffix .= "$pkgheader->{pkgver}-" . "$pkgheader->{pkgrel}-";

      # Check for 'any' in package architecture
      if ($pkgheader->{pkgarch}->{$pkgname}->[0] eq 'any') {
        $suffix .= 'any';
      }
      else {
        $suffix .= $makepkgconf->{CARCH};
      }

      $suffix .= $makepkgconf->{PKGEXT};

      my $filename  = "$pkgname-$suffix";
      my $debugname = "$pkgname-debug-$suffix";

      # Remember package filename and dependencies for later access
      $pkgfilename{$pkgname} = $filename;
      $dbgfilename{$pkgname} = $debugname;

      # Remember reference back to original package name for provided stuff
      foreach my $provided (@{$pkgheader->{pkgprovides}->{$pkgname}}) {
        $providerpkg{$provided} = $pkgname;
      }
    }

    # Remember the data, we need for the build process
    push(@buildorder, [$pkgbuildpath, $pkgheader->{pkgname}, $dependsref]);
  }

  # Now run over all packages again and build missing packages
  my $update_done = 0;
  PACKAGE: foreach my $packagedata (@buildorder) {
    my ($pkgbuildpath, $pkgnameref, $pkgdepends) = @$packagedata;

    # Still something to build?
    my $packages_built = 0;
    foreach my $pkgname (@$pkgnameref) {
      $packages_built++ if (-s "$cfg{TARGET}/$pkgfilename{$pkgname}");
    }
    next PACKAGE if ($packages_built == @$pkgnameref);

    # Remove orphan dependencies, not needed for this package (verify mode)
    RemoveOrphanDeps($pkgdepends) if ($opts{V});

    # At this point we know that we will build at least one package and
    # orphan packages are gone. So now get sure the build system is up-to-date
    if (!$update_done) {
      SystemUpdate();
      $update_done = 1;
    }

    # Get sure that all pre-existing packages are out of our way
    foreach my $pkgname (@$pkgnameref) {
      if (-s "$cfg{TARGET}/$pkgfilename{$pkgname}") {
        unlink("$cfg{TARGET}/$pkgfilename{$pkgname}") or die($!);
      }
      if (-s "$cfg{TARGET}/$dbgfilename{$pkgname}") {
        unlink("$cfg{TARGET}/$dbgfilename{$pkgname}") or die($!);
      }
    }

    # If no BUILDDIR and SRCDEST configured, then change owner of
    # package path to BUILDUSER
    unless ($makepkgconf->{BUILDDIR} &&
            $makepkgconf->{SRCDEST}) {
      system ('chown', '-R', $cfg{BUILDUSER}, $pkgbuildpath);
      die("Failed to change owner of '$pkgbuildpath' to build user\n") if ($?);
    }

    InfoMsg("Resolving dependencies for '$pkgbuildpath'...");

    # Separate dependencies into "ours" and "system repository"
    my @repodeps;
    my @ourdeps;
    foreach my $depend (@$pkgdepends) {
      if (defined($pkgfilename{$depend})) {
        push(@ourdeps, $depend);
      }
      elsif (defined($providerpkg{$depend})) {
        push(@ourdeps, $providerpkg{$depend});
      }
      else {
        push(@repodeps, $depend);
      }
    }

    # Collect "dependencies of dependencies" for our packages
    my @depstocheck;
    my %depchecked;
    do {
      @depstocheck = @ourdeps;
      foreach my $depend (@depstocheck) {
        next if (defined($depchecked{$depend}));
        my $depdepends = GetPKGDeps("$cfg{TARGET}/$pkgfilename{$depend}");
        foreach my $depdepend (@$depdepends) {
          if (defined($pkgfilename{$depdepend})) {
            unshift(@ourdeps, $depdepend);
          }
          elsif (defined($providerpkg{$depdepend})) {
            unshift(@ourdeps, $providerpkg{$depdepend});
          }
        }
        $depchecked{$depend} = 1;
      }
    } while (@ourdeps != @depstocheck);

    # Get sure that we don't have duplicates in the list of our dependencies
    RemoveDuplicates(\@ourdeps);

    # Install dependencies
    InfoMsg('Installing missing dependencies...') if (@ourdeps + @repodeps > 0);
    if (@ourdeps > 0) {
      my $oldcwd = getcwd();
      chdir($cfg{TARGET});
      foreach my $depend (@ourdeps) {
        InfoMsg("Attempting to install $pkgfilename{$depend}...");
        my $success = AutoPacman('-U', '--needed', '--asdeps', $pkgfilename{$depend});
        # It is common that installing a dependency fails if an already
        # installed package depends on an old version. Then we have to try a
        # second time and uninstall the old package recursively first.
        unless ($success) {
          InfoMsg("First attempt failed. Second attempt...");
          AutoPacman('-Rc', $depend)
            or die("Uninstall of old package failed!\n");
          AutoPacman('-U', '--needed', '--asdeps', $pkgfilename{$depend})
            or die("pacman failed!\n");
        }
      }
      chdir($oldcwd);
    }
    if (@repodeps > 0) {
      AutoPacman('-S', '--needed', '--asdeps', @repodeps)
        or die("pacman failed!\n");
    }

    # Build package in context of BUILDUSER
    my $pid = fork();
    die('fork failed') unless(defined($pid));
    if ($pid == 0) {
      setgid($builduserinfo[PW_GID]) or die('setgid failed');
      setuid($builduserinfo[PW_UID]) or die('setuid failed');
      $ENV{HOME} = $builduserinfo[PW_DIR];
      chdir($pkgbuildpath);
      exec('makepkg', '-fc', '--nosign');
    }

    # Wait for the forked process, we created above, and check for build errors
    $SIG{INT} = 'IGNORE';
    $SIG{QUIT} = 'IGNORE';
    waitpid($pid, 0);
    $SIG{INT} = 'DEFAULT';
    $SIG{QUIT} = 'DEFAULT';
    die("makepkg failed for '$pkgbuildpath'!\n") if ($?);

    # Check if all packages, we expected, have been created
    foreach my $pkgname (@$pkgnameref) {
      my $filename = $pkgfilename{$pkgname};
      my $pkgpath = "$cfg{TARGET}/$filename";
      die("Missing package: $filename\n") unless (-s $pkgpath);

      # If configured, then run CHECKSCRIPT as BUILDUSER.
      if ($cfg{CHECKSCRIPT}) {
        system('su', $cfg{BUILDUSER}, '-c', "$cfg{CHECKSCRIPT} '$pkgpath'");
        if ($?) {
          unlink($pkgpath);
          die("Checkscript returned with error state for '$filename'!\n");
        }
      }

      # Sign package(s) if signing is configured
      if ($makepkgconf->{BUILDENV}->{sign}) {
        my @tosign = ($pkgpath);
        push(@tosign, "$cfg{TARGET}/$dbgfilename{$pkgname}")
          if (-s "$cfg{TARGET}/$dbgfilename{$pkgname}");

        my @signwithkey;
        @signwithkey = ('-u', $makepkgconf->{GPGKEY})
          if ($makepkgconf->{GPGKEY});

        foreach my $tosignpath (@tosign) {
          unlink("$tosignpath.sig");
          InfoMsg("Signing '$tosignpath'...");
          system('gpg', '--detach-sign', '--use-agent', @signwithkey, '--no-armor', $tosignpath);
          if ($?) {
            # Delete the actual package to force rebuild
            unlink($pkgpath);
            die("Signing of '$tosignpath' failed!\n");
          }
        }
      }
    }
  }

  # Final cleanup of orphan dependencies (verify mode)
  RemoveOrphanDeps() if ($opts{V});

  # Create hash array of valid package filenames.
  # All "pkgfilename"'s are valid. Add "dbgfilename"'s if package exists.
  my %packages = reverse(%pkgfilename);
  while (my($pkgname, $filename) = each(%dbgfilename)) {
    $packages{$filename} = $pkgname if (-s "$cfg{TARGET}/$filename");
  }

  # Run cleanup on the target directory
  opendir(my $DH, $cfg{TARGET}) or die($!);
  while (my $file = readdir($DH)) {
    next if ($file =~ /^\./);
    next if ($file !~ /\Q$makepkgconf->{PKGEXT}\E$/);
    unless (defined($packages{$file})) {
      unlink("$cfg{TARGET}/$file") or die("Failed to delete: $file\n");
      unlink("$cfg{TARGET}/$file.sig");
    }
  }
  closedir($DH);

  # Run cleanup on the DB file.
  my $dbpath = "$cfg{TARGET}/$cfg{REPONAME}.db.tar.gz";
  if (-s $dbpath) {
    my @dirstoremove;
    my $tar = Archive::Tar->new;
    my @files = $tar->read($dbpath);
    foreach my $tarfile (@files) {
      # Split dirname and filename part
      my ($dirname, $filename) = $tarfile->{name} =~ /([^\/]+)\/?(.*)/;

      # Only continue for the file "desc" and try to find full package filename
      next if ($filename ne 'desc');
      my $pkgfilename = "$dirname-$makepkgconf->{CARCH}$makepkgconf->{PKGEXT}";
      unless ($packages{$pkgfilename}) {
        $pkgfilename = "$dirname-any$makepkgconf->{PKGEXT}";
      }

      # If the package file doesn't exist or is outdated, then remove from DB
      if (!$packages{$pkgfilename} ||
          (stat("$cfg{TARGET}/$pkgfilename"))->mtime > $tarfile->{mtime}) {
        push(@dirstoremove, $dirname);
      }
      # If Package exists (and is up to date) then remove from list of packages
      elsif ($packages{$pkgfilename}) {
        delete($packages{$pkgfilename});
      }
    }

    # Run "repo-remove" if needed
    if (@dirstoremove > 0) {
      my @pkgnames = map { s/-[^-]+-[^-]+$//r } @dirstoremove;
      my $oldcwd = getcwd();
      chdir($cfg{TARGET});
      unlink("$cfg{REPONAME}.db");
      system('repo-remove', "$cfg{REPONAME}.db.tar.gz", @pkgnames);
      die("repo-remove failed\n") if ($?);
      chdir($oldcwd);
    }
  }

  # Run "repo-add" if needed
  if (keys(%packages) > 0) {
    my $oldcwd = getcwd();
    chdir($cfg{TARGET});
    unlink("$cfg{REPONAME}.db");
    system('repo-add', "$cfg{REPONAME}.db.tar.gz", keys(%packages));
    die("repo-add failed\n") if ($?);
    chdir($oldcwd);
  }
}

sub VERSION_MESSAGE {
  print "$PROGNAME $VERSION\n";
  exit(0);
}

sub HELP_MESSAGE {
  # Print out the built-in POD documentation in case of --help parameter
  Pod::Simple::Text->filter($0);
  exit(0);
}

# Special function for the case where autobuilt packages are stored on GIT.
# Restores file modification times from the repository database file.
sub RestoreRepoMtimes {
  my ($cfg, $makepkgconf) = @_ or die("Arguments missing!");

  my $dbpath = "$cfg->{TARGET}/$cfg->{REPONAME}.db.tar.gz";
  return if (!-s $dbpath);

  my $tar = Archive::Tar->new;
  my @files = $tar->read($dbpath);
  foreach my $tarfile (@files) {
    # Split dirname and filename part
    my ($dirname, $filename) = $tarfile->{name} =~ /([^\/]+)\/?(.*)/;

    # Only continue for the file "desc" and try to find full package filename
    next if ($filename ne 'desc');
    my $pkgfilename = "$dirname-$makepkgconf->{CARCH}$makepkgconf->{PKGEXT}";
    unless (-s "$cfg->{TARGET}/$pkgfilename") {
      $pkgfilename = "$dirname-any$makepkgconf->{PKGEXT}";
    }

    # If the file exists, then set access- and modification time
    if (-s "$cfg->{TARGET}/$pkgfilename") {
      utime($tarfile->{mtime}, $tarfile->{mtime}, "$cfg->{TARGET}/$pkgfilename");
    }
  }
}

sub InfoMsg {
  print STDERR color('bold green'), "==> $PROGNAME: ", color('reset'),
               color('bold'), $_[0], color('reset'), "\n";
}

sub WarnMsg {
  print STDERR color('bold yellow'), "==> $PROGNAME: WARNING: ", color('reset'),
               color('bold'), $_[0], color('reset'), "\n";
}

# Removes duplicated items from the given array without changing the order
# of items. Currently only for string arrays!
sub RemoveDuplicates {
  my ($arrayref) = @_;

  for (my $index = 0; $index < @$arrayref; $index++) {
    my $current = $arrayref->[$index];
    for (my $subindex = $index + 1; $subindex < @$arrayref; $subindex++) {
      if ($arrayref->[$subindex] eq $current) {
        splice(@$arrayref, $subindex, 1);
        $subindex--;
      }
    }
  }
}

# Handles updating of the build system
sub SystemUpdate {
  # Always get sure the package DB is up-to-date
  InfoMsg('Synchronizing package lists...');
  system('pacman', '-Sy');
  die("pacman failed!\n") if ($?);

  # If no upgrade for over 24 hours, then force upgrade!
  if (time() - GetLastSystemUpgradeTime() > 24 * 60 * 60) {
    InfoMsg('Upgrading build system...');
    system('pacman', '-Su', '--noconfirm');
    die("pacman failed!\n") if ($?);
  }
}

# Returns timestamp of last full system upgrade by parsing pacman.log
sub GetLastSystemUpgradeTime {
  # Default path to pacman.log
  my $logpath = '/var/log/pacman.log';

  # Try to read alternative path from pacman.conf
  if (open(my $fhconf, '<', '/etc/pacman.conf')) {
    if (my ($logfilecfg) = grep(/^\s*LogFile/, <$fhconf>)) {
      ($logpath) = $logfilecfg =~ /.*?=\s*(.*)/;
    }
    close($fhconf);
  }

  # Read pacman.log backwards
  my $pid = open(my $fh, '-|', 'tac', $logpath)
    or die("Failed to execute 'tac': $!\n");
  while (my $line = <$fh>) {
    if (my ($time) = $line =~
        /^\[([^\]]+)\] \[PACMAN\] starting full system upgrade$/) {
      my ($year, $month, $day, $hour, $minute) = split(/[T:-]/, $time);
      return mktime(0, $minute, $hour, $day, $month - 1, $year - 1900);
    }
  }

  # Wait for "tac" to terminate and check exit code
  waitpid($pid, 0);
  die("Failed to read pacman.log\n") if ($?);
  close($fh);
}

sub HandleGPGAgent {
  return unless (-x '/usr/bin/gpg-agent');

  # Check if agent is already running
  system('gpg-agent 2> /dev/null');
  return unless ($?);

  # Start daemon
  system('gpg-agent --daemon --default-cache-ttl 7200 --pinentry-program /usr/bin/pinentry-curses > /dev/null');
  die("gpg-agent startup failed\n") if ($?);
}

# Returns an array reference of orphan dependency cycle pairs.
# An orphan dependency cycle are two packages that have been installed as
# dependency that depend on each other but have no explicitly installed package
# that depends on them.
sub GetOrphanDepCycles {
  # Get list of all packages that were installed as dependency
  open(my $fhlist, '-|', 'pacman', '-Qdq') or die("Can't start pacman: $!\n");
  chomp(my @alldeps = <$fhlist>);
  close($fhlist);
  die($!) if ($?);
  return [] if (@alldeps == 0);

  # Get info of all dependency packages
  # In my tests the full list of dependency packages was way lower than ARG_MAX
  # so pass all at once to pacman for speed
  open($fhlist, '-|', 'pacman', '-Qi', @alldeps) or die($!);
  chomp(my @info = <$fhlist>);
  close($fhlist);
  die($!) if ($?);

  # Parse the info list.
  # For packages that are required by exactly one package, remember the
  # combination in %deps
  my %deps;
  my $name;
  foreach my $line (@info) {
    $name = $1 if ($line =~ /^Name\s*:\s*(.+)/);
    if ($line =~ /^Required By\s*:\s*(.+)/) {
      die("Failed to parse pacman info result!") if (!$name);
      my @requiredby = split(/ /, $1);
      if (@requiredby == 1 && $requiredby[0] ne "None") {
        $deps{$name} = $requiredby[0];
        $name = 0;
      }
    }
  }

  # Now finally get the cycles
  my @cycles;
  my @pkgs_to_check = keys(%deps);
  foreach my $pkgname (@pkgs_to_check) {
    if (defined($deps{$pkgname})) {
      my $reqpkg = $deps{$pkgname};
      if (defined($deps{$reqpkg})) {
        if ($deps{$pkgname} eq $reqpkg && $deps{$reqpkg} eq $pkgname) {
          push(@cycles, [$pkgname, $reqpkg]);
          delete($deps{$pkgname});
          delete($deps{$reqpkg});
        }
      }
    }
  }

  return \@cycles
}

# Removes orphan dependencies.
# Optionally a reference to a list of packages to keep can be passed
sub RemoveOrphanDeps {
  my ($aPkgsToKeep) = @_;

  # Get hash array with packages to keep. We use "pacman -Qsq" to get the
  # actual package names for names that are only "provided" by a package
  # (vdr-api --> vdr)
  my %keeppkg;
  if ($aPkgsToKeep) {
    foreach my $pkgname (@$aPkgsToKeep) {
      open(my $fhout, '-|', 'pacman', '-Qsq', '^'.quotemeta($pkgname).'$')
        or die("Can't start pacman: $!\n");
      my @orig_pkgnames = <$fhout>;
      close($fhout);
      if (@orig_pkgnames) {
        chomp(@orig_pkgnames);
        $keeppkg{$_} = 1 foreach(@orig_pkgnames);
      }
    }
  }

  # Do this as long as there are still packages found
  while(1) {
    # Get list of orphans
    open(my $fhlist, '-|', 'pacman', '-Qdttq') or die("Can't start pacman: $!\n");
    chomp(my @list = <$fhlist>);
    close($fhlist);

    # Filter out packages that are not meant to be uninstalled
    @list = grep {!$keeppkg{$_}} @list;

    # Get list of orphan dependency cycles. If both cycle partners are not in
    # our blacklist, add one of them to the orphan list
    my $cycles = GetOrphanDepCycles();
    foreach my $cycle (@$cycles) {
      if (!$keeppkg{$cycle->[0]} && !$keeppkg{$cycle->[1]}) {
        push(@list, $cycle->[0]);
      }
    }

    # Finally uninstall if there are still packages left
    return if (@list == 0);
    InfoMsg('Uninstalling unrequired dependencies...');
    system('pacman', '-Rs', '--noconfirm', @list);
    die("pacman failed\n") if ($?);
  }
}

sub GetPKGDeps {
  my ($aPath) = @_;

  die("Expected package '".basename($aPath)."' not built. Check build order!\n")
    unless (-s $aPath);

  state %cache;
  unless ($cache{$aPath}) {
    my @deplist;
    open(my $fhlist, '-|', 'bsdtar', '-xOf', $aPath, '.PKGINFO') or die($!);
    while(my $line = <$fhlist>) {
      my ($value) = $line =~ /^depend ?= ?(.+)$/ or next;
      # Drop anything after the equal sign
      $value =~ s/[<>=].*//;
      push(@deplist, $value);
    }
    $cache{$aPath} = \@deplist;
  }
  return $cache{$aPath};
}

# Subfunction to automate pacman in cases where "--noconfirm" doesn't work
sub AutoPacman {
  my @aOptions = @_;

  # Get sure that we have the same output everywhere
  local $ENV{LC_MESSAGES} = 'C';

  # Open pacman and connect our own STDIN and STDERR
  my($fhin, $fherr);
  use Symbol 'gensym'; $fherr = gensym;
  my $pid = open3($fhin, '>&STDOUT', $fherr, 'pacman', @aOptions);
  $fherr->autoflush(1);

  # Let's chat with pacman ;)
  while(sysread($fherr, my $buffer, 1024)) {
    print STDERR $buffer;
    # Remove conflicting packages, so we can go on with installation.
    if ($buffer =~ /are in conflict.*Remove/) {
      print STDERR "y\n";
      print $fhin "y\n";
    }
    # All other cases: Just proceed with default.
    elsif ($buffer =~ /Enter a number \(/ ||
           $buffer =~ /\[y\/n\]/i) {
      print STDERR "\n";
      print $fhin "\n";
    }
  }

  waitpid($pid, 0);
  return($? == 0);
}

sub ParseConfig {
  my($aPath, $aHashRef, $aListAllowed) = @_;
  my $mode = 0;

  my @list;
  open(my $FH, '<', $aPath) or die("Can't open '$aPath'\n");
  while (my $line = <$FH>) {
    $line =~ s/\s*$//;
    next if ($line =~ /^\s*#/ || $line eq '');

    if (my ($pref, $value) = $line =~ /^\s*([A-Z_]+)\s*=\s*(.+)/) {
      $aHashRef->{$pref} = $value;
    }
    elsif ($aListAllowed && $line =~ /^[A-Z0-9\/_.-]+$/i) {
      push(@list, $line);
    }
    else {
      die("Parsing error in '$aPath' on line $.\n");
    }
  }

  $aHashRef->{list} = \@list if (@list > 0);
}

# SRCINFO parser
sub ParseSRCINFO {
  my ($aPath, $aBuilduser) = @_;
  my %values;

  my $pkgbuildpath = "$aPath/PKGBUILD";
  die("PKGBUILD in '$aPath' not found\n") unless (-s $pkgbuildpath);

  # If .SRCINFO is missing or older than PKGBUILD, then recreate it.
  # Add one second to the .SRCINFO modification time to prevent recreation of
  # .SRCINFO files for fresh GIT clones (where the mtime is the time where GIT
  # created the files when cloning the remote repository)
  my $srcinfopath = "$aPath/.SRCINFO";
  if (!-s $srcinfopath ||
      stat($srcinfopath)->mtime + 1 < stat($pkgbuildpath)->mtime) {

    my $oldcwd = getcwd();
    chdir($aPath);
    open(my $fhmakepkg, '-|', 'su', $aBuilduser, '-c', 'makepkg --nosign --printsrcinfo')
      or die("Can't start makepkg --printsrcinfo: $!\n");
    my @srcinfo = <$fhmakepkg>;
    close($fhmakepkg);

    die ("Failed to get SRCINFO with makepkg") if ($?);

    chdir($oldcwd);

    open(my $fhsrcinfo, '>', $srcinfopath)
      or die("Failed to write $srcinfopath: $!\n");
    print $fhsrcinfo $_ foreach (@srcinfo);
    close($fhsrcinfo);
  }

  die(".SRCINFO in '$aPath' not found.\n") unless (-s $srcinfopath);

  open(my $fh, '<', $srcinfopath);
  read($fh, my $lines, -s $fh);
  close($fh);

  my @split = split /\n\n/, $lines;

  # Possible arrays
  foreach my $value ('arch', 'checkdepends', 'depends', 'makedepends', 'provides') {
    # Remove everything after "<", ">" or "=". We don't need version numbers.
    @{$values{$value}} = $split[0] =~ /^\t$value = (.*?)(?:[<>=].*?)?$/gm;
  }

  # Possible variables
  foreach my $value ('epoch', 'pkgrel', 'pkgver') {
    ($values{$value}) = $split[0] =~ /^\t$value = (.*?)$/gm;
  }

  # Non global infos
  foreach my $index (1 .. $#split) {
    (my $current_pkgname) = $split[$index] =~ /pkgname = (.*?)$/gm;
    # We need this information globally.
    push(@{$values{'pkgname'}}, $current_pkgname);

    # Possible non global arrays. Fall back to global if non-existent
    foreach my $value ('arch', 'provides') {
      # Remove everything after "<", ">" or "=". We don't need version numbers.
      my @entries = $split[$index] =~ /^\t$value = (.*?)(?:[<>=].*?)?$/gm;
      @entries = @{$values{$value}} if (@entries == 0);
      $values{"pkg$value"}{$current_pkgname} = \@entries;
    }
  }

  return \%values;
}

# makepkg.conf parser
sub ReadMakepkgConf {
  open(my $FH, '<', '/etc/makepkg.conf') or die("Can't read makepkg.conf\n");
  my %values;
  my $buildenv;
  while (my $line = <$FH>) {
    $values{CARCH} = $1      if ($line =~ /^CARCH=["']([^"']+)/);
    $values{PKGEXT} = $1     if ($line =~ /^PKGEXT=["']([^"']+)/);
    $values{BUILDDIR} = $1   if ($line =~ /^BUILDDIR=["']?([^"'\n]+)/);
    $values{SRCDEST} = $1    if ($line =~ /^SRCDEST=["']?([^"'\n]+)/);
    $values{GPGKEY} = $1     if ($line =~ /^GPGKEY=["']?([^"'\n]+)/);
    $buildenv = $1 if ($line =~ /^BUILDENV=\(([^)]+)/);
  }
  close($FH);

  die("Can't get CARCH from makepkg.conf\n") unless (defined($values{CARCH}));
  die("Can't get PKGEXT from makepkg.conf\n") unless (defined($values{PKGEXT}));
  die("Can't get BUILDENV from makepkg.conf\n") unless(defined($buildenv));
  $values{BUILDENV} = { map {$_ => 1} split(/\s+/, $buildenv) };

  # Special case. These two can be overriden via environment variables
  $values{BUILDDIR} = $ENV{BUILDDIR} if ($ENV{BUILDDIR});
  $values{SRCDEST} = $ENV{SRCDEST} if ($ENV{SRCDEST});

  return \%values;
}

__END__

=head1 NAME

repo-make - A tool to autobuild a set of PKGBUILD's

=head1 SYNOPSIS

B<repo-make>

=head1 DESCRIPTION

B<repo-make> is automatic build system, designed for distributions based on the pacman package manager and the PKGBUILD based (makepkg) build system.

It auto-generates packages based on a I<repo-make.conf> that has to exist in the the directory, where you call B<repo-make>.

=head2 Command Switches

Switches include:

=over 5

=item B<-C> DIR, B<--directory>=DIR

Change to directory DIR before reading repo-make.conf or doing anything else.

=item B<-t> PATH, B<--target>=PATH

Sets the target path where the finished packages are placed to and overrides the TARGET setting in repo-make.conf

=item B<-V>, B<--verify>

Runs repo-make in "verify mode" which can be used to check if your I<depends> or I<makedepends> arrays really contain all needed packages for a successful build. To do this, repo-make uninstalls all orphan dependencies between the builds.

=item B<--restore-repo-mtimes>

This parameter should be avoided if possible as it weakens repo-make's repository database verification. It may however be required if you use repo-make in a continous integration system which stores the repository on a GIT repository (like GitHub pages). To compensate for the fact that GIT does not store file modification times, this parameter makes repo-make restore file modification times from the repository database.

=item B<--help>

Display this help and exit

=item B<--version>

Output version information and exit

=back

=head1 WARNING

B<repo-make> has to run with root privileges as its goal is to auto-generate a set of packages B<without user interaction>! It will automatically update the system, repo-make runs on, and install missing dependencies from the global repositories or from the newly built packages.

Even though the build itself runs with an unprivileged user, it is not recommended to use repo-make on a productive system. Please set up a dedicated build environment. KVM or VirtualBox can be very handy to do so.

=head1 FILES

=over 5

=item F<./repo-make-custom.conf>

=item F<./repo-make.conf>

=item F</etc/repo-make.conf>

Configuration files that control the build process. Further information in repo-make.conf(5).

=back

=head1 SEE ALSO

repo-make.conf(5), makepkg.conf(5)
